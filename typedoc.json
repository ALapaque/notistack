{
	"id": 0,
	"name": "notistack",
	"kind": 0,
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 119,
			"name": "SnackbarProvider",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 120,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					},
					"type": {
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "typeParameter",
							"name": "T"
						}
					}
				},
				{
					"id": 121,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "V"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "React.ComponentType"
							}
						],
						"name": "Record"
					}
				},
				{
					"id": 124,
					"name": "S",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				},
				{
					"id": 125,
					"name": "SS",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				},
				{
					"id": 170,
					"name": "S",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				}
			],
			"children": [
				{
					"id": 173,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": ""
							},
							{
								"tag": "see",
								"text": "https://reactjs.org/docs/legacy-context.html\n"
							}
						]
					},
					"signatures": [
						{
							"id": 174,
							"name": "new SnackbarProvider",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": ""
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/legacy-context.html\n"
									}
								]
							},
							"parameters": [
								{
									"id": 175,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 75,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "V",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													},
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "V"
																},
																{
																	"type": "reference",
																	"typeArguments": [
																		{
																			"type": "intrinsic",
																			"name": "any"
																		}
																	],
																	"name": "React.ComponentType"
																}
															],
															"name": "Record"
														}
													}
												],
												"name": "SnackbarProviderProps"
											}
										],
										"name": "Readonly"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 119,
								"name": "SnackbarProvider"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 173,
								"name": "Component.__constructor"
							}
						},
						{
							"id": 176,
							"name": "new SnackbarProvider",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": ""
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/legacy-context.html\n"
									}
								]
							},
							"parameters": [
								{
									"id": 177,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"id": 75,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "V",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "typeParameter",
														"name": "T"
													}
												}
											},
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "V"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "intrinsic",
																	"name": "any"
																}
															],
															"name": "React.ComponentType"
														}
													],
													"name": "Record"
												}
											}
										],
										"name": "SnackbarProviderProps"
									}
								},
								{
									"id": 178,
									"name": "context",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 119,
								"name": "SnackbarProvider"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 173,
								"name": "Component.__constructor"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 448,
							"character": 21
						},
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 450,
							"character": 40
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 173,
						"name": "Component.__constructor"
					}
				},
				{
					"id": 123,
					"name": "closeSnackbar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 334,
							"character": 17
						}
					],
					"type": {
						"type": "indexedAccess",
						"indexType": {
							"type": "stringLiteral",
							"value": "closeSnackbar"
						},
						"objectType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "React.ComponentType"
											}
										],
										"name": "Record"
									}
								}
							],
							"name": "ProviderContext"
						}
					}
				},
				{
					"id": 172,
					"name": "context",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.",
						"text": "```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
						"tags": [
							{
								"tag": "see",
								"text": "https://reactjs.org/docs/context.html\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 448,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 172,
						"name": "Component.context"
					}
				},
				{
					"id": 122,
					"name": "enqueueSnackbar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 332,
							"character": 19
						}
					],
					"type": {
						"type": "indexedAccess",
						"indexType": {
							"type": "stringLiteral",
							"value": "enqueueSnackbar"
						},
						"objectType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "React.ComponentType"
											}
										],
										"name": "Record"
									}
								}
							],
							"name": "ProviderContext"
						}
					}
				},
				{
					"id": 199,
					"name": "props",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 473,
							"character": 22
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 75,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "V",
												"constraint": {
													"type": "typeOperator",
													"operator": "keyof",
													"target": {
														"type": "typeParameter",
														"name": "T"
													}
												}
											},
											{
												"type": "typeParameter",
												"name": "T",
												"constraint": {
													"type": "reference",
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "V"
														},
														{
															"type": "reference",
															"typeArguments": [
																{
																	"type": "intrinsic",
																	"name": "any"
																}
															],
															"name": "React.ComponentType"
														}
													],
													"name": "Record"
												}
											}
										],
										"name": "SnackbarProviderProps"
									}
								],
								"name": "Readonly"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 200,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"children": [
												{
													"id": 201,
													"name": "children",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true,
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/react/index.d.ts",
															"line": 473,
															"character": 57
														}
													],
													"type": {
														"type": "reference",
														"name": "ReactNode"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														201
													]
												}
											],
											"sources": [
												{
													"fileName": "node_modules/@types/react/index.d.ts",
													"line": 473,
													"character": 47
												}
											]
										}
									}
								],
								"name": "Readonly"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 199,
						"name": "Component.props"
					}
				},
				{
					"id": 203,
					"name": "refs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "\nhttps://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 479,
							"character": 12
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 204,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 205,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {
										"isExported": true
									},
									"parameters": [
										{
											"id": 206,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ReactInstance"
									}
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@types/react/index.d.ts",
									"line": 479,
									"character": 13
								}
							]
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 203,
						"name": "Component.refs"
					}
				},
				{
					"id": 202,
					"name": "state",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 474,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "S"
							}
						],
						"name": "Readonly"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 202,
						"name": "Component.state"
					}
				},
				{
					"id": 171,
					"name": "contextType",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "If set, `this.context` will be set at runtime to the current value of the given Context.",
						"text": "Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
						"tags": [
							{
								"tag": "see",
								"text": "https://reactjs.org/docs/context.html#classcontexttype\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 430,
							"character": 26
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Context"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 171,
						"name": "Component.contextType"
					}
				},
				{
					"id": 150,
					"name": "UNSAFE_componentWillMount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 151,
							"name": "UNSAFE_componentWillMount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
								"text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
								"tags": [
									{
										"tag": "deprecated",
										"text": "16.3, use componentDidMount or the constructor instead"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 150,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 674,
							"character": 33
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 150,
						"name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
					}
				},
				{
					"id": 156,
					"name": "UNSAFE_componentWillReceiveProps",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 157,
							"name": "UNSAFE_componentWillReceiveProps",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
								"text": "Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
								"tags": [
									{
										"tag": "deprecated",
										"text": "16.3, use static getDerivedStateFromProps instead"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
									}
								]
							},
							"parameters": [
								{
									"id": 158,
									"name": "nextProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 75,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "V",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													},
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "V"
																},
																{
																	"type": "reference",
																	"typeArguments": [
																		{
																			"type": "intrinsic",
																			"name": "any"
																		}
																	],
																	"name": "React.ComponentType"
																}
															],
															"name": "Record"
														}
													}
												],
												"name": "SnackbarProviderProps"
											}
										],
										"name": "Readonly"
									}
								},
								{
									"id": 159,
									"name": "nextContext",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 156,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 706,
							"character": 40
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 156,
						"name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
					}
				},
				{
					"id": 165,
					"name": "UNSAFE_componentWillUpdate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 166,
							"name": "UNSAFE_componentWillUpdate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
								"text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
								"tags": [
									{
										"tag": "deprecated",
										"text": "16.3, use getSnapshotBeforeUpdate instead"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
									}
								]
							},
							"parameters": [
								{
									"id": 167,
									"name": "nextProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 75,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "V",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													},
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "V"
																},
																{
																	"type": "reference",
																	"typeArguments": [
																		{
																			"type": "intrinsic",
																			"name": "any"
																		}
																	],
																	"name": "React.ComponentType"
																}
															],
															"name": "Record"
														}
													}
												],
												"name": "SnackbarProviderProps"
											}
										],
										"name": "Readonly"
									}
								},
								{
									"id": 168,
									"name": "nextState",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "S"
											}
										],
										"name": "Readonly"
									}
								},
								{
									"id": 169,
									"name": "nextContext",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 165,
								"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 734,
							"character": 34
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 165,
						"name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
					}
				},
				{
					"id": 135,
					"name": "componentDidCatch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 136,
							"name": "componentDidCatch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."
							},
							"parameters": [
								{
									"id": 137,
									"name": "error",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"name": "Error"
									}
								},
								{
									"id": 138,
									"name": "errorInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"name": "ErrorInfo"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 135,
								"name": "ComponentLifecycle.componentDidCatch"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 603,
							"character": 25
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 135,
						"name": "ComponentLifecycle.componentDidCatch"
					}
				},
				{
					"id": 126,
					"name": "componentDidMount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 127,
							"name": "componentDidMount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 126,
								"name": "ComponentLifecycle.componentDidMount"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 582,
							"character": 25
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 126,
						"name": "ComponentLifecycle.componentDidMount"
					}
				},
				{
					"id": 143,
					"name": "componentDidUpdate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 144,
							"name": "componentDidUpdate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Called immediately after updating occurs. Not called for the initial render.",
								"text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n"
							},
							"parameters": [
								{
									"id": 145,
									"name": "prevProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 75,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "V",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													},
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "V"
																},
																{
																	"type": "reference",
																	"typeArguments": [
																		{
																			"type": "intrinsic",
																			"name": "any"
																		}
																	],
																	"name": "React.ComponentType"
																}
															],
															"name": "Record"
														}
													}
												],
												"name": "SnackbarProviderProps"
											}
										],
										"name": "Readonly"
									}
								},
								{
									"id": 146,
									"name": "prevState",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "S"
											}
										],
										"name": "Readonly"
									}
								},
								{
									"id": 147,
									"name": "snapshot",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 125,
										"name": "SS"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 143,
								"name": "NewLifecycle.componentDidUpdate"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 645,
							"character": 26
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 143,
						"name": "NewLifecycle.componentDidUpdate"
					}
				},
				{
					"id": 148,
					"name": "componentWillMount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 149,
							"name": "componentWillMount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
								"text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
								"tags": [
									{
										"tag": "deprecated",
										"text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 148,
								"name": "DeprecatedLifecycle.componentWillMount"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 660,
							"character": 26
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 148,
						"name": "DeprecatedLifecycle.componentWillMount"
					}
				},
				{
					"id": 152,
					"name": "componentWillReceiveProps",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 153,
							"name": "componentWillReceiveProps",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
								"text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
								"tags": [
									{
										"tag": "deprecated",
										"text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
									}
								]
							},
							"parameters": [
								{
									"id": 154,
									"name": "nextProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 75,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "V",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													},
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "V"
																},
																{
																	"type": "reference",
																	"typeArguments": [
																		{
																			"type": "intrinsic",
																			"name": "any"
																		}
																	],
																	"name": "React.ComponentType"
																}
															],
															"name": "Record"
														}
													}
												],
												"name": "SnackbarProviderProps"
											}
										],
										"name": "Readonly"
									}
								},
								{
									"id": 155,
									"name": "nextContext",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 152,
								"name": "DeprecatedLifecycle.componentWillReceiveProps"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 689,
							"character": 33
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 152,
						"name": "DeprecatedLifecycle.componentWillReceiveProps"
					}
				},
				{
					"id": 133,
					"name": "componentWillUnmount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 134,
							"name": "componentWillUnmount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 133,
								"name": "ComponentLifecycle.componentWillUnmount"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 598,
							"character": 28
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 133,
						"name": "ComponentLifecycle.componentWillUnmount"
					}
				},
				{
					"id": 160,
					"name": "componentWillUpdate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 161,
							"name": "componentWillUpdate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
								"text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
								"tags": [
									{
										"tag": "deprecated",
										"text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
									}
								]
							},
							"parameters": [
								{
									"id": 162,
									"name": "nextProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 75,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "V",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													},
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "V"
																},
																{
																	"type": "reference",
																	"typeArguments": [
																		{
																			"type": "intrinsic",
																			"name": "any"
																		}
																	],
																	"name": "React.ComponentType"
																}
															],
															"name": "Record"
														}
													}
												],
												"name": "SnackbarProviderProps"
											}
										],
										"name": "Readonly"
									}
								},
								{
									"id": 163,
									"name": "nextState",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "S"
											}
										],
										"name": "Readonly"
									}
								},
								{
									"id": 164,
									"name": "nextContext",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 160,
								"name": "DeprecatedLifecycle.componentWillUpdate"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 719,
							"character": 27
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 160,
						"name": "DeprecatedLifecycle.componentWillUpdate"
					}
				},
				{
					"id": 192,
					"name": "forceUpdate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 193,
							"name": "forceUpdate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 194,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 195,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExported": true
													},
													"signatures": [
														{
															"id": 196,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 192,
								"name": "Component.forceUpdate"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 465,
							"character": 19
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 192,
						"name": "Component.forceUpdate"
					}
				},
				{
					"id": 139,
					"name": "getSnapshotBeforeUpdate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 140,
							"name": "getSnapshotBeforeUpdate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
								"text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n"
							},
							"parameters": [
								{
									"id": 141,
									"name": "prevProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 75,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "V",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													},
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "V"
																},
																{
																	"type": "reference",
																	"typeArguments": [
																		{
																			"type": "intrinsic",
																			"name": "any"
																		}
																	],
																	"name": "React.ComponentType"
																}
															],
															"name": "Record"
														}
													}
												],
												"name": "SnackbarProviderProps"
											}
										],
										"name": "Readonly"
									}
								},
								{
									"id": 142,
									"name": "prevState",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "S"
											}
										],
										"name": "Readonly"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "typeParameter",
										"name": "SS"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 139,
								"name": "NewLifecycle.getSnapshotBeforeUpdate"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 639,
							"character": 31
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 139,
						"name": "NewLifecycle.getSnapshotBeforeUpdate"
					}
				},
				{
					"id": 197,
					"name": "render",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 198,
							"name": "render",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "ReactNode"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 197,
								"name": "Component.render"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 466,
							"character": 14
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 197,
						"name": "Component.render"
					}
				},
				{
					"id": 179,
					"name": "setState",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 180,
							"name": "setState",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 181,
									"name": "K",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "typeParameter",
											"name": "S"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 182,
									"name": "state",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reflection",
												"declaration": {
													"id": 183,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExported": true
													},
													"signatures": [
														{
															"id": 184,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExported": true
															},
															"parameters": [
																{
																	"id": 185,
																	"name": "prevState",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExported": true
																	},
																	"type": {
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "typeParameter",
																				"name": "S"
																			}
																		],
																		"name": "Readonly"
																	}
																},
																{
																	"id": 186,
																	"name": "props",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExported": true
																	},
																	"type": {
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 75,
																				"typeArguments": [
																					{
																						"type": "typeParameter",
																						"name": "V",
																						"constraint": {
																							"type": "typeOperator",
																							"operator": "keyof",
																							"target": {
																								"type": "typeParameter",
																								"name": "T"
																							}
																						}
																					},
																					{
																						"type": "typeParameter",
																						"name": "T",
																						"constraint": {
																							"type": "reference",
																							"typeArguments": [
																								{
																									"type": "typeParameter",
																									"name": "V"
																								},
																								{
																									"type": "reference",
																									"typeArguments": [
																										{
																											"type": "intrinsic",
																											"name": "any"
																										}
																									],
																									"name": "React.ComponentType"
																								}
																							],
																							"name": "Record"
																						}
																					}
																				],
																				"name": "SnackbarProviderProps"
																			}
																		],
																		"name": "Readonly"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "null"
																	},
																	{
																		"type": "unknown",
																		"name": "S"
																	},
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 187,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {
																				"isExported": true
																			}
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "node_modules/@types/react/index.d.ts",
															"line": 461,
															"character": 18
														}
													]
												}
											},
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "null"
													},
													{
														"type": "unknown",
														"name": "S"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 188,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {
																"isExported": true
															}
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 189,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 190,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExported": true
													},
													"signatures": [
														{
															"id": 191,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 179,
								"name": "Component.setState"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 460,
							"character": 16
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 179,
						"name": "Component.setState"
					}
				},
				{
					"id": 128,
					"name": "shouldComponentUpdate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 129,
							"name": "shouldComponentUpdate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Called to determine whether the change in props and state should trigger a re-render.",
								"text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n"
							},
							"parameters": [
								{
									"id": 130,
									"name": "nextProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 75,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "V",
														"constraint": {
															"type": "typeOperator",
															"operator": "keyof",
															"target": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													},
													{
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"typeArguments": [
																{
																	"type": "typeParameter",
																	"name": "V"
																},
																{
																	"type": "reference",
																	"typeArguments": [
																		{
																			"type": "intrinsic",
																			"name": "any"
																		}
																	],
																	"name": "React.ComponentType"
																}
															],
															"name": "Record"
														}
													}
												],
												"name": "SnackbarProviderProps"
											}
										],
										"name": "Readonly"
									}
								},
								{
									"id": 131,
									"name": "nextState",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "S"
											}
										],
										"name": "Readonly"
									}
								},
								{
									"id": 132,
									"name": "nextContext",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 128,
								"name": "ComponentLifecycle.shouldComponentUpdate"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 593,
							"character": 29
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 128,
						"name": "ComponentLifecycle.shouldComponentUpdate"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						173
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						123,
						172,
						122,
						199,
						203,
						202,
						171
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						150,
						156,
						165,
						135,
						126,
						143,
						148,
						152,
						133,
						160,
						192,
						139,
						197,
						179,
						128
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 331,
					"character": 37
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"id": 75,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "V",
									"constraint": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								},
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "React.ComponentType"
											}
										],
										"name": "Record"
									}
								}
							],
							"name": "SnackbarProviderProps"
						}
					],
					"name": "Component"
				}
			]
		},
		{
			"id": 101,
			"name": "EnqueueSnackbar",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 102,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					},
					"type": {
						"type": "reference",
						"id": 243,
						"name": "AnyComponentMap"
					}
				}
			],
			"signatures": [
				{
					"id": 103,
					"name": "__call",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 104,
							"name": "V",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"id": 244,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"id": 243,
											"name": "AnyComponentMap"
										}
									}
								],
								"name": "VariantsOf"
							}
						}
					],
					"parameters": [
						{
							"id": 105,
							"name": "options",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"id": 42,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "V",
												"constraint": {
													"type": "reference",
													"id": 244,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "T",
															"constraint": {
																"type": "reference",
																"id": 243,
																"name": "AnyComponentMap"
															}
														}
													],
													"name": "VariantsOf"
												}
											}
										],
										"name": "OptionsObject"
									},
									{
										"type": "reference",
										"id": 259,
										"typeArguments": [
											{
												"type": "indexedAccess",
												"indexType": {
													"type": "typeParameter",
													"name": "V",
													"constraint": {
														"type": "reference",
														"id": 244,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"id": 243,
																	"name": "AnyComponentMap"
																}
															}
														],
														"name": "VariantsOf"
													}
												},
												"objectType": {
													"type": "typeParameter",
													"name": "T",
													"constraint": {
														"type": "reference",
														"id": 243,
														"name": "AnyComponentMap"
													}
												}
											}
										],
										"name": "AdditionalPropsOfComponent"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 106,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"children": [
												{
													"id": 107,
													"name": "message",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true,
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/types.ts",
															"line": 322,
															"character": 102
														}
													],
													"type": {
														"type": "reference",
														"id": 216,
														"name": "SnackbarMessage"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														107
													]
												}
											],
											"sources": [
												{
													"fileName": "src/types.ts",
													"line": 322,
													"character": 92
												}
											]
										}
									}
								]
							}
						}
					],
					"type": {
						"type": "reference",
						"id": 213,
						"name": "SnackbarKey"
					}
				},
				{
					"id": 108,
					"name": "__call",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 109,
							"name": "V",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"id": 244,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"id": 243,
											"name": "AnyComponentMap"
										}
									}
								],
								"name": "VariantsOf"
							}
						}
					],
					"parameters": [
						{
							"id": 110,
							"name": "message",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 111,
							"name": "options",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"id": 42,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "V",
												"constraint": {
													"type": "reference",
													"id": 244,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "T",
															"constraint": {
																"type": "reference",
																"id": 243,
																"name": "AnyComponentMap"
															}
														}
													],
													"name": "VariantsOf"
												}
											}
										],
										"name": "OptionsObject"
									},
									{
										"type": "reference",
										"id": 259,
										"typeArguments": [
											{
												"type": "indexedAccess",
												"indexType": {
													"type": "typeParameter",
													"name": "V",
													"constraint": {
														"type": "reference",
														"id": 244,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "T",
																"constraint": {
																	"type": "reference",
																	"id": 243,
																	"name": "AnyComponentMap"
																}
															}
														],
														"name": "VariantsOf"
													}
												},
												"objectType": {
													"type": "typeParameter",
													"name": "T",
													"constraint": {
														"type": "reference",
														"id": 243,
														"name": "AnyComponentMap"
													}
												}
											}
										],
										"name": "AdditionalPropsOfComponent"
									}
								]
							}
						}
					],
					"type": {
						"type": "reference",
						"id": 213,
						"name": "SnackbarKey"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 321,
					"character": 25
				}
			]
		},
		{
			"id": 65,
			"name": "InternalSnack",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Properties of a snackbar internal to notistack implementation. Not to be used by outside\nworld. If you find yourself using this, you're probably looking for `CustomContentProps` type."
			},
			"typeParameter": [
				{
					"id": 66,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"children": [
				{
					"id": 73,
					"name": "entered",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 250,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 63,
						"name": "InternalSnackAttributes.entered"
					}
				},
				{
					"id": 69,
					"name": "iconVariant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 263,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "React.ReactNode"
							}
						],
						"name": "Record"
					}
				},
				{
					"id": 67,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 261,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"id": 213,
						"name": "SnackbarKey"
					}
				},
				{
					"id": 68,
					"name": "message",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 262,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"id": 216,
						"name": "SnackbarMessage"
					}
				},
				{
					"id": 72,
					"name": "open",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 249,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 62,
						"name": "InternalSnackAttributes.open"
					}
				},
				{
					"id": 74,
					"name": "requestClose",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 251,
							"character": 16
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 64,
						"name": "InternalSnackAttributes.requestClose"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						73,
						69,
						67,
						68,
						72,
						74
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 260,
					"character": 30
				}
			],
			"extendedTypes": [
				{
					"type": "intersection",
					"types": [
						{
							"type": "reflection",
							"declaration": {
								"id": 70,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {
									"isExported": true
								}
							}
						},
						{
							"type": "reflection",
							"declaration": {
								"id": 71,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {
									"isExported": true
								}
							}
						}
					]
				},
				{
					"type": "reference",
					"id": 61,
					"name": "InternalSnackAttributes"
				}
			]
		},
		{
			"id": 61,
			"name": "InternalSnackAttributes",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Properties of the internal snack which should not be exposed to outside world"
			},
			"children": [
				{
					"id": 63,
					"name": "entered",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 250,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 62,
					"name": "open",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 249,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 64,
					"name": "requestClose",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 251,
							"character": 16
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						63,
						62,
						64
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 248,
					"character": 33
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 65,
					"name": "InternalSnack"
				}
			]
		},
		{
			"id": 42,
			"name": "OptionsObject",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {},
			"typeParameter": [
				{
					"id": 43,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"children": [
				{
					"id": 58,
					"name": "SnackbarProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Properties applied to the Snackbar root element. You'd only want to use\nthis prop to apply html attributes for accessibility or data-* attributes."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 206,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "React.HTMLAttributes"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 38,
						"name": "SharedProps.SnackbarProps"
					}
				},
				{
					"id": 51,
					"name": "TransitionComponent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The component used for the transition. notistack supports 4 transitions\nout of the box. You can also create your own transitions using react-transition-group.\n```jsx\nimport Fade from 'notistack/transitions/Fade';\nimport Grow from 'notistack/transitions/Grow';\nimport Slide from 'notistack/transitions/Slide';\nimport Zoom from 'notistack/transitions/Zoom';\n```",
						"tags": [
							{
								"tag": "default",
								"text": "Slide\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 158,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 9,
								"name": "TransitionProps"
							}
						],
						"name": "React.ComponentType"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 31,
						"name": "SharedProps.TransitionComponent"
					}
				},
				{
					"id": 53,
					"name": "TransitionProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Properties applied to Transition component"
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 180,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 9,
								"name": "TransitionProps"
							}
						],
						"name": "Partial"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 33,
						"name": "SharedProps.TransitionProps"
					}
				},
				{
					"id": 56,
					"name": "action",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Callback used for getting action(s). actions are mostly buttons displayed in Snackbar.",
						"tags": [
							{
								"tag": "param",
								"text": "key of a snackbar\n",
								"param": "key"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 196,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"id": 217,
						"name": "SnackbarAction"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 36,
						"name": "SharedProps.action"
					}
				},
				{
					"id": 48,
					"name": "anchorOrigin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The anchor of the `Snackbar`.",
						"tags": [
							{
								"tag": "default",
								"text": "{ horizontal: left, vertical: bottom }\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 133,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"id": 21,
						"name": "SnackbarOrigin"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 28,
						"name": "SharedProps.anchorOrigin"
					}
				},
				{
					"id": 49,
					"name": "autoHideDuration",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The number of milliseconds to wait before automatically calling the\n`onClose` function. By default snackbars get closed after 5000 milliseconds.\nSet autoHideDuration to 'null' if you don't want snackbars to automatically close.\nAlternatively pass `persist: true` in the options parameter of enqueueSnackbar.",
						"tags": [
							{
								"tag": "default",
								"text": "5000\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 141,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 29,
						"name": "SharedProps.autoHideDuration"
					}
				},
				{
					"id": 46,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 127,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 26,
						"name": "SharedProps.className"
					}
				},
				{
					"id": 50,
					"name": "disableWindowBlurListener",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "If `true`, the `autoHideDuration` timer will expire even if the window is not focused.",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 146,
							"character": 29
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 30,
						"name": "SharedProps.disableWindowBlurListener"
					}
				},
				{
					"id": 57,
					"name": "hideIconVariant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Hides iconVariant if set to `true`.",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 201,
							"character": 19
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 37,
						"name": "SharedProps.hideIconVariant"
					}
				},
				{
					"id": 44,
					"name": "key",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Unique identifier to reference a snackbar.",
						"tags": [
							{
								"tag": "default",
								"text": "string random unique string\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 239,
							"character": 7
						}
					],
					"type": {
						"type": "reference",
						"id": 213,
						"name": "SnackbarKey"
					}
				},
				{
					"id": 60,
					"name": "onClose",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Callback fired before snackbar requests to get closed.\nThe `reason` parameter can optionally be used to control the response to `onClose`.",
						"tags": [
							{
								"tag": "param",
								"text": "The event source of the callback",
								"param": "event"
							},
							{
								"tag": "param",
								"text": "Can be:`\"timeout\"` (`autoHideDuration` expired) or: `\"clickaway\"`\n or: `\"maxsnack\"` (snackbar was closed because `maxSnack` has reached) or: `\"instructed\"`\n(snackbar was closed programmatically)",
								"param": "reason"
							},
							{
								"tag": "param",
								"text": "key of a Snackbar. key will be `undefined` if closeSnackbar\nis called with no key (user requested all the snackbars to be closed)\n",
								"param": "key"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 228,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"id": 226,
						"name": "TransitionCloseHandler"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 40,
						"name": "SharedProps.onClose"
					}
				},
				{
					"id": 45,
					"name": "persist",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Snackbar stays on the screen, unless it is dismissed (programmatically or through user interaction).",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 244,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 55,
					"name": "preventDuplicate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Ignores displaying multiple snackbars with the same `message`",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 191,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 35,
						"name": "SharedProps.preventDuplicate"
					}
				},
				{
					"id": 47,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 128,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"name": "React.CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 27,
						"name": "SharedProps.style"
					}
				},
				{
					"id": 52,
					"name": "transitionDuration",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The duration for the transition, in milliseconds.",
						"text": "You may specify a single timeout for both enter and exit transitions:\n```js\ntimeout={500}\n```\nor individually:\n```js\ntimeout={{ enter: 300, exit: 500 }}\n```\nor auto-adjust based on dimensions of the snackbar (Only applicable if TransitionComponent is Grow)\n```js\ntransitionDuration=\"auto\"\n```",
						"tags": [
							{
								"tag": "default",
								"text": "{ enter: 225, exit: 195 }\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 176,
							"character": 22
						}
					],
					"type": {
						"type": "indexedAccess",
						"indexType": {
							"type": "stringLiteral",
							"value": "timeout"
						},
						"objectType": {
							"type": "reference",
							"name": "TransitionProps"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 32,
						"name": "SharedProps.transitionDuration"
					}
				},
				{
					"id": 54,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Used to easily display different variant of snackbars. When passed to `SnackbarProvider`\nall snackbars inherit the `variant`, unless you override it in `enqueueSnackbar` options.",
						"tags": [
							{
								"tag": "default",
								"text": "default\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 186,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "typeParameter",
								"name": "V",
								"constraint": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							{
								"type": "reference",
								"id": 214,
								"name": "VariantType"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 34,
						"name": "SharedProps.variant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						58,
						51,
						53,
						56,
						48,
						49,
						46,
						50,
						57,
						44,
						60,
						45,
						55,
						47,
						52,
						54
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 234,
					"character": 30
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 24,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "V",
							"constraint": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"name": "SharedProps"
				}
			]
		},
		{
			"id": 112,
			"name": "ProviderContext",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 113,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					},
					"type": {
						"type": "reference",
						"id": 243,
						"name": "AnyComponentMap"
					}
				}
			],
			"children": [
				{
					"id": 115,
					"name": "closeSnackbar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 328,
							"character": 17
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 116,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 117,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"parameters": [
										{
											"id": 118,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 213,
												"name": "SnackbarKey"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types.ts",
									"line": 328,
									"character": 18
								}
							]
						}
					}
				},
				{
					"id": 114,
					"name": "enqueueSnackbar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 327,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"id": 101,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "T",
								"constraint": {
									"type": "reference",
									"id": 243,
									"name": "AnyComponentMap"
								}
							}
						],
						"name": "EnqueueSnackbar"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						115,
						114
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 326,
					"character": 32
				}
			]
		},
		{
			"id": 24,
			"name": "SharedProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {},
			"typeParameter": [
				{
					"id": 25,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"children": [
				{
					"id": 38,
					"name": "SnackbarProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Properties applied to the Snackbar root element. You'd only want to use\nthis prop to apply html attributes for accessibility or data-* attributes."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 206,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "React.HTMLAttributes"
					}
				},
				{
					"id": 31,
					"name": "TransitionComponent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The component used for the transition. notistack supports 4 transitions\nout of the box. You can also create your own transitions using react-transition-group.\n```jsx\nimport Fade from 'notistack/transitions/Fade';\nimport Grow from 'notistack/transitions/Grow';\nimport Slide from 'notistack/transitions/Slide';\nimport Zoom from 'notistack/transitions/Zoom';\n```",
						"tags": [
							{
								"tag": "default",
								"text": "Slide\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 158,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 9,
								"name": "TransitionProps"
							}
						],
						"name": "React.ComponentType"
					}
				},
				{
					"id": 33,
					"name": "TransitionProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Properties applied to Transition component"
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 180,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 9,
								"name": "TransitionProps"
							}
						],
						"name": "Partial"
					}
				},
				{
					"id": 36,
					"name": "action",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Callback used for getting action(s). actions are mostly buttons displayed in Snackbar.",
						"tags": [
							{
								"tag": "param",
								"text": "key of a snackbar\n",
								"param": "key"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 196,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"id": 217,
						"name": "SnackbarAction"
					}
				},
				{
					"id": 28,
					"name": "anchorOrigin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The anchor of the `Snackbar`.",
						"tags": [
							{
								"tag": "default",
								"text": "{ horizontal: left, vertical: bottom }\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 133,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"id": 21,
						"name": "SnackbarOrigin"
					}
				},
				{
					"id": 29,
					"name": "autoHideDuration",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The number of milliseconds to wait before automatically calling the\n`onClose` function. By default snackbars get closed after 5000 milliseconds.\nSet autoHideDuration to 'null' if you don't want snackbars to automatically close.\nAlternatively pass `persist: true` in the options parameter of enqueueSnackbar.",
						"tags": [
							{
								"tag": "default",
								"text": "5000\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 141,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 26,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 127,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 30,
					"name": "disableWindowBlurListener",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "If `true`, the `autoHideDuration` timer will expire even if the window is not focused.",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 146,
							"character": 29
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 37,
					"name": "hideIconVariant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Hides iconVariant if set to `true`.",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 201,
							"character": 19
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 40,
					"name": "onClose",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Callback fired before snackbar requests to get closed.\nThe `reason` parameter can optionally be used to control the response to `onClose`.",
						"tags": [
							{
								"tag": "param",
								"text": "The event source of the callback",
								"param": "event"
							},
							{
								"tag": "param",
								"text": "Can be:`\"timeout\"` (`autoHideDuration` expired) or: `\"clickaway\"`\n or: `\"maxsnack\"` (snackbar was closed because `maxSnack` has reached) or: `\"instructed\"`\n(snackbar was closed programmatically)",
								"param": "reason"
							},
							{
								"tag": "param",
								"text": "key of a Snackbar. key will be `undefined` if closeSnackbar\nis called with no key (user requested all the snackbars to be closed)\n",
								"param": "key"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 228,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"id": 226,
						"name": "TransitionCloseHandler"
					}
				},
				{
					"id": 35,
					"name": "preventDuplicate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Ignores displaying multiple snackbars with the same `message`",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 191,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 27,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 128,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"name": "React.CSSProperties"
					}
				},
				{
					"id": 32,
					"name": "transitionDuration",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The duration for the transition, in milliseconds.",
						"text": "You may specify a single timeout for both enter and exit transitions:\n```js\ntimeout={500}\n```\nor individually:\n```js\ntimeout={{ enter: 300, exit: 500 }}\n```\nor auto-adjust based on dimensions of the snackbar (Only applicable if TransitionComponent is Grow)\n```js\ntransitionDuration=\"auto\"\n```",
						"tags": [
							{
								"tag": "default",
								"text": "{ enter: 225, exit: 195 }\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 176,
							"character": 22
						}
					],
					"type": {
						"type": "indexedAccess",
						"indexType": {
							"type": "stringLiteral",
							"value": "timeout"
						},
						"objectType": {
							"type": "reference",
							"name": "TransitionProps"
						}
					}
				},
				{
					"id": 34,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Used to easily display different variant of snackbars. When passed to `SnackbarProvider`\nall snackbars inherit the `variant`, unless you override it in `enqueueSnackbar` options.",
						"tags": [
							{
								"tag": "default",
								"text": "default\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 186,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "typeParameter",
								"name": "V",
								"constraint": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							{
								"type": "reference",
								"id": 214,
								"name": "VariantType"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						38,
						31,
						33,
						36,
						28,
						29,
						26,
						30,
						37,
						40,
						35,
						27,
						32,
						34
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 126,
					"character": 28
				}
			],
			"extendedTypes": [
				{
					"type": "reflection",
					"declaration": {
						"id": 41,
						"name": "__type",
						"kind": 65536,
						"kindString": "Type literal",
						"flags": {
							"isExported": true
						},
						"sources": [
							{
								"fileName": "src/types.ts",
								"line": 126,
								"character": 68
							}
						]
					}
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 42,
					"name": "OptionsObject"
				},
				{
					"type": "reference",
					"id": 75,
					"name": "SnackbarProviderProps"
				}
			]
		},
		{
			"id": 21,
			"name": "SnackbarOrigin",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 23,
					"name": "horizontal",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 118,
							"character": 14
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "left"
							},
							{
								"type": "stringLiteral",
								"value": "center"
							},
							{
								"type": "stringLiteral",
								"value": "right"
							}
						]
					}
				},
				{
					"id": 22,
					"name": "vertical",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 117,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "top"
							},
							{
								"type": "stringLiteral",
								"value": "bottom"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						23,
						22
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 116,
					"character": 31
				}
			]
		},
		{
			"id": 75,
			"name": "SnackbarProviderProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {},
			"typeParameter": [
				{
					"id": 76,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					},
					"type": {
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "typeParameter",
							"name": "T"
						}
					}
				},
				{
					"id": 77,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "V"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "React.ComponentType"
							}
						],
						"name": "Record"
					}
				}
			],
			"children": [
				{
					"id": 85,
					"name": "Components",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Mapping between variants and a custom component."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 312,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"id": 77,
						"name": "T"
					}
				},
				{
					"id": 98,
					"name": "SnackbarProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Properties applied to the Snackbar root element. You'd only want to use\nthis prop to apply html attributes for accessibility or data-* attributes."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 206,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "HTMLDivElement"
							}
						],
						"name": "React.HTMLAttributes"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 38,
						"name": "SharedProps.SnackbarProps"
					}
				},
				{
					"id": 91,
					"name": "TransitionComponent",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The component used for the transition. notistack supports 4 transitions\nout of the box. You can also create your own transitions using react-transition-group.\n```jsx\nimport Fade from 'notistack/transitions/Fade';\nimport Grow from 'notistack/transitions/Grow';\nimport Slide from 'notistack/transitions/Slide';\nimport Zoom from 'notistack/transitions/Zoom';\n```",
						"tags": [
							{
								"tag": "default",
								"text": "Slide\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 158,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 9,
								"name": "TransitionProps"
							}
						],
						"name": "React.ComponentType"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 31,
						"name": "SharedProps.TransitionComponent"
					}
				},
				{
					"id": 93,
					"name": "TransitionProps",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Properties applied to Transition component"
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 180,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 9,
								"name": "TransitionProps"
							}
						],
						"name": "Partial"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 33,
						"name": "SharedProps.TransitionProps"
					}
				},
				{
					"id": 96,
					"name": "action",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Callback used for getting action(s). actions are mostly buttons displayed in Snackbar.",
						"tags": [
							{
								"tag": "param",
								"text": "key of a snackbar\n",
								"param": "key"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 196,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"id": 217,
						"name": "SnackbarAction"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 36,
						"name": "SharedProps.action"
					}
				},
				{
					"id": 88,
					"name": "anchorOrigin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The anchor of the `Snackbar`.",
						"tags": [
							{
								"tag": "default",
								"text": "{ horizontal: left, vertical: bottom }\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 133,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"id": 21,
						"name": "SnackbarOrigin"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 28,
						"name": "SharedProps.anchorOrigin"
					}
				},
				{
					"id": 89,
					"name": "autoHideDuration",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The number of milliseconds to wait before automatically calling the\n`onClose` function. By default snackbars get closed after 5000 milliseconds.\nSet autoHideDuration to 'null' if you don't want snackbars to automatically close.\nAlternatively pass `persist: true` in the options parameter of enqueueSnackbar.",
						"tags": [
							{
								"tag": "default",
								"text": "5000\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 141,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 29,
						"name": "SharedProps.autoHideDuration"
					}
				},
				{
					"id": 78,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Most of the time this is your App. every component from this point onward\nwill be able to show snackbars."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 281,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "React.ReactNode"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "React.ReactNode"
								}
							}
						]
					}
				},
				{
					"id": 86,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 127,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 26,
						"name": "SharedProps.className"
					}
				},
				{
					"id": 82,
					"name": "classes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Override or extend the styles applied to the container component or Snackbars."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 299,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"id": 211,
								"typeArguments": [
									{
										"type": "reference",
										"id": 249,
										"name": "CombinedClassKey"
									}
								],
								"name": "ClassNameMap"
							}
						],
						"name": "Partial"
					}
				},
				{
					"id": 79,
					"name": "dense",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Denser margins for snackbars. Recommended to be used on mobile devices.",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 286,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 90,
					"name": "disableWindowBlurListener",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "If `true`, the `autoHideDuration` timer will expire even if the window is not focused.",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 146,
							"character": 29
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 30,
						"name": "SharedProps.disableWindowBlurListener"
					}
				},
				{
					"id": 81,
					"name": "domRoot",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Valid and exist HTML Node element, used to target `ReactDOM.createPortal`"
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 295,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "HTMLElement"
					}
				},
				{
					"id": 97,
					"name": "hideIconVariant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Hides iconVariant if set to `true`.",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 201,
							"character": 19
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 37,
						"name": "SharedProps.hideIconVariant"
					}
				},
				{
					"id": 83,
					"name": "iconVariant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Mapping between variants and an icon component"
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 303,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "V",
										"constraint": {
											"type": "typeOperator",
											"operator": "keyof",
											"target": {
												"type": "typeParameter",
												"name": "T"
											}
										}
									},
									{
										"type": "reference",
										"name": "React.ReactNode"
									}
								],
								"name": "Record"
							}
						],
						"name": "Partial"
					}
				},
				{
					"id": 80,
					"name": "maxSnack",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Maximum snackbars that can be stacked on top of one another.",
						"tags": [
							{
								"tag": "default",
								"text": "3\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 291,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 100,
					"name": "onClose",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Callback fired before snackbar requests to get closed.\nThe `reason` parameter can optionally be used to control the response to `onClose`.",
						"tags": [
							{
								"tag": "param",
								"text": "The event source of the callback",
								"param": "event"
							},
							{
								"tag": "param",
								"text": "Can be:`\"timeout\"` (`autoHideDuration` expired) or: `\"clickaway\"`\n or: `\"maxsnack\"` (snackbar was closed because `maxSnack` has reached) or: `\"instructed\"`\n(snackbar was closed programmatically)",
								"param": "reason"
							},
							{
								"tag": "param",
								"text": "key of a Snackbar. key will be `undefined` if closeSnackbar\nis called with no key (user requested all the snackbars to be closed)\n",
								"param": "key"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 228,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"id": 226,
						"name": "TransitionCloseHandler"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 40,
						"name": "SharedProps.onClose"
					}
				},
				{
					"id": 95,
					"name": "preventDuplicate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Ignores displaying multiple snackbars with the same `message`",
						"tags": [
							{
								"tag": "default",
								"text": "false\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 191,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 35,
						"name": "SharedProps.preventDuplicate"
					}
				},
				{
					"id": 87,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 128,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"name": "React.CSSProperties"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 27,
						"name": "SharedProps.style"
					}
				},
				{
					"id": 92,
					"name": "transitionDuration",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The duration for the transition, in milliseconds.",
						"text": "You may specify a single timeout for both enter and exit transitions:\n```js\ntimeout={500}\n```\nor individually:\n```js\ntimeout={{ enter: 300, exit: 500 }}\n```\nor auto-adjust based on dimensions of the snackbar (Only applicable if TransitionComponent is Grow)\n```js\ntransitionDuration=\"auto\"\n```",
						"tags": [
							{
								"tag": "default",
								"text": "{ enter: 225, exit: 195 }\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 176,
							"character": 22
						}
					],
					"type": {
						"type": "indexedAccess",
						"indexType": {
							"type": "stringLiteral",
							"value": "timeout"
						},
						"objectType": {
							"type": "reference",
							"name": "TransitionProps"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 32,
						"name": "SharedProps.transitionDuration"
					}
				},
				{
					"id": 94,
					"name": "variant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Used to easily display different variant of snackbars. When passed to `SnackbarProvider`\nall snackbars inherit the `variant`, unless you override it in `enqueueSnackbar` options.",
						"tags": [
							{
								"tag": "default",
								"text": "default\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 186,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 244,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T",
										"constraint": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "typeParameter",
													"name": "V"
												},
												{
													"type": "reference",
													"typeArguments": [
														{
															"type": "intrinsic",
															"name": "any"
														}
													],
													"name": "React.ComponentType"
												}
											],
											"name": "Record"
										}
									}
								],
								"name": "VariantsOf"
							},
							{
								"type": "reference",
								"id": 214,
								"name": "VariantType"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 34,
						"name": "SharedProps.variant"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						85,
						98,
						91,
						93,
						96,
						88,
						89,
						78,
						86,
						82,
						79,
						90,
						81,
						97,
						83,
						80,
						100,
						95,
						87,
						92,
						94
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 276,
					"character": 38
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 24,
					"typeArguments": [
						{
							"type": "reference",
							"id": 244,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T",
									"constraint": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "V"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "React.ComponentType"
											}
										],
										"name": "Record"
									}
								}
							],
							"name": "VariantsOf"
						}
					],
					"name": "SharedProps"
				}
			]
		},
		{
			"id": 1,
			"name": "TransitionDuration",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 2,
					"name": "enter",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 3,
							"character": 43
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 3,
					"name": "exit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 3,
							"character": 58
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						2,
						3
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 3,
					"character": 35
				}
			]
		},
		{
			"id": 4,
			"name": "TransitionHandlerProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {},
			"children": [
				{
					"id": 5,
					"name": "onEnter",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Callback fired before the transition is entering."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 12,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"id": 232,
						"name": "TransitionEnterHandler"
					}
				},
				{
					"id": 6,
					"name": "onEntered",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Callback fired when the transition has entered."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 16,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"id": 232,
						"name": "TransitionEnterHandler"
					}
				},
				{
					"id": 7,
					"name": "onExit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Callback fired before the transition is exiting."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 20,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"id": 238,
						"name": "TransitionExitHandler"
					}
				},
				{
					"id": 8,
					"name": "onExited",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Callback fired when the transition has exited."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 24,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"id": 238,
						"name": "TransitionExitHandler"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						5,
						6,
						7,
						8
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 8,
					"character": 39
				}
			]
		},
		{
			"id": 9,
			"name": "TransitionProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 19,
					"name": "children",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 75,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "React.ReactNode"
					}
				},
				{
					"id": 18,
					"name": "direction",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The direction in which a snackbar slides into the screen.\nOnly applicable if `TransitionComponent` is Slide"
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 74,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"id": 207,
						"name": "SlideTransitionDirection"
					}
				},
				{
					"id": 13,
					"name": "enter",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Enable or disable enter transitions."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 46,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 14,
					"name": "exit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Enable or disable exit transitions."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 50,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 10,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Id/key of the snackbar this transition belongs to. Used in transition callbacks\n(e.g. onExited) to identify which snackbar has exited."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 34,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"id": 213,
						"name": "SnackbarKey"
					}
				},
				{
					"id": 11,
					"name": "in",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Show the component; triggers the enter or exit states"
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 38,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 15,
					"name": "mountOnEnter",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "By default the child component is mounted immediately along with the\nparent Transition component. If you want to \"lazy mount\" the component on\nthe first `in={true}` you can set `mountOnEnter`. After the first enter\ntransition the component will stay mounted, even on \"exited\", unless you\nalso specify `unmountOnExit`."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 58,
							"character": 16
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 17,
					"name": "style",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Can be used to apply a custom `transitionTimingFunction` (e.g. your own easing),\n`transitionDuration` and `transitionDelay`."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 69,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"name": "React.CSSProperties"
					}
				},
				{
					"id": 12,
					"name": "timeout",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The duration of the transition, in milliseconds"
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 42,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "reference",
								"id": 1,
								"name": "TransitionDuration"
							},
							{
								"type": "stringLiteral",
								"value": "auto"
							}
						]
					}
				},
				{
					"id": 16,
					"name": "unmountOnExit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "By default the child component stays mounted after it reaches the\n'exited' state. Set `unmountOnExit` if you'd prefer to unmount the\ncomponent after it finishes exiting."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 64,
							"character": 17
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						19,
						18,
						13,
						14,
						10,
						11,
						15,
						17,
						12,
						16
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 29,
					"character": 32
				}
			],
			"extendedTypes": [
				{
					"type": "reflection",
					"declaration": {
						"id": 20,
						"name": "__type",
						"kind": 65536,
						"kindString": "Type literal",
						"flags": {
							"isExported": true
						},
						"sources": [
							{
								"fileName": "src/types.ts",
								"line": 29,
								"character": 40
							}
						]
					}
				}
			]
		},
		{
			"id": 255,
			"name": "AdditionalProps",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "All additional props (custom content props excluded (except message))"
			},
			"typeParameter": [
				{
					"id": 256,
					"name": "P",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					},
					"type": {
						"type": "reference",
						"id": 253,
						"name": "CustomContentProps"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 316,
					"character": 20
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "typeParameter",
						"name": "P",
						"constraint": {
							"type": "reference",
							"id": 253,
							"name": "CustomContentProps"
						}
					},
					{
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "reference",
							"id": 253,
							"name": "CustomContentProps"
						}
					}
				],
				"name": "Omit"
			}
		},
		{
			"id": 259,
			"name": "AdditionalPropsOfComponent",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 260,
					"name": "C",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					},
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "React.ComponentType"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 319,
					"character": 31
				}
			],
			"type": {
				"type": "reference",
				"id": 255,
				"typeArguments": [
					{
						"type": "reference",
						"id": 257,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "C",
								"constraint": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "any"
										}
									],
									"name": "React.ComponentType"
								}
							}
						],
						"name": "PropsOfComponent"
					}
				],
				"name": "AdditionalProps"
			}
		},
		{
			"id": 243,
			"name": "AnyComponentMap",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 93,
					"character": 20
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "React.ComponentType"
					}
				],
				"name": "Record"
			}
		},
		{
			"id": 211,
			"name": "ClassNameMap",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 212,
					"name": "ClassKey",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 79,
					"character": 24
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "typeParameter",
						"name": "ClassKey",
						"constraint": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				],
				"name": "Record"
			}
		},
		{
			"id": 215,
			"name": "CloseReason",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 83,
					"character": 23
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "timeout"
					},
					{
						"type": "stringLiteral",
						"value": "clickaway"
					},
					{
						"type": "stringLiteral",
						"value": "maxsnack"
					},
					{
						"type": "stringLiteral",
						"value": "instructed"
					}
				]
			}
		},
		{
			"id": 249,
			"name": "CombinedClassKey",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 114,
					"character": 28
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"id": 248,
						"name": "ContainerClassKey"
					},
					{
						"type": "reference",
						"id": 247,
						"name": "SnackbarClassKey"
					}
				]
			}
		},
		{
			"id": 248,
			"name": "ContainerClassKey",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 105,
					"character": 29
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "containerRoot"
					},
					{
						"type": "stringLiteral",
						"value": "containerAnchorOriginTopCenter"
					},
					{
						"type": "stringLiteral",
						"value": "containerAnchorOriginBottomCenter"
					},
					{
						"type": "stringLiteral",
						"value": "containerAnchorOriginTopRight"
					},
					{
						"type": "stringLiteral",
						"value": "containerAnchorOriginBottomRight"
					},
					{
						"type": "stringLiteral",
						"value": "containerAnchorOriginTopLeft"
					},
					{
						"type": "stringLiteral",
						"value": "containerAnchorOriginBottomLeft"
					}
				]
			}
		},
		{
			"id": 253,
			"name": "CustomContentProps",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Props that will be passed to a custom component in `SnackbarProvider` `Components` prop"
			},
			"typeParameter": [
				{
					"id": 254,
					"name": "V",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 271,
					"character": 30
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"id": 65,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "V",
								"constraint": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"name": "InternalSnack"
					},
					{
						"type": "reference",
						"id": 252,
						"name": "NotNeededByCustomSnackbar"
					}
				],
				"name": "Omit"
			}
		},
		{
			"id": 251,
			"name": "NeededByInternalSnack",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 254,
					"character": 26
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "style"
					},
					{
						"type": "stringLiteral",
						"value": "persist"
					},
					{
						"type": "stringLiteral",
						"value": "variant"
					},
					{
						"type": "stringLiteral",
						"value": "anchorOrigin"
					},
					{
						"type": "stringLiteral",
						"value": "TransitionComponent"
					},
					{
						"type": "stringLiteral",
						"value": "TransitionProps"
					},
					{
						"type": "stringLiteral",
						"value": "transitionDuration"
					},
					{
						"type": "stringLiteral",
						"value": "hideIconVariant"
					},
					{
						"type": "stringLiteral",
						"value": "disableWindowBlurListener"
					}
				]
			}
		},
		{
			"id": 252,
			"name": "NotNeededByCustomSnackbar",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 266,
					"character": 30
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "reference",
							"id": 61,
							"name": "InternalSnackAttributes"
						}
					},
					{
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "reference",
							"id": 4,
							"name": "TransitionHandlerProps"
						}
					},
					{
						"type": "stringLiteral",
						"value": "onClose"
					},
					{
						"type": "stringLiteral",
						"value": "SnackbarProps"
					},
					{
						"type": "stringLiteral",
						"value": "disableWindowBlurListener"
					},
					{
						"type": "stringLiteral",
						"value": "TransitionComponent"
					},
					{
						"type": "stringLiteral",
						"value": "transitionDuration"
					},
					{
						"type": "stringLiteral",
						"value": "TransitionProps"
					},
					{
						"type": "stringLiteral",
						"value": "dense"
					},
					{
						"type": "stringLiteral",
						"value": "content"
					}
				]
			}
		},
		{
			"id": 257,
			"name": "PropsOfComponent",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Infers type of props passed to a custom component"
			},
			"typeParameter": [
				{
					"id": 258,
					"name": "C",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 318,
					"character": 21
				}
			],
			"type": {
				"type": "conditional",
				"checkType": {
					"type": "typeParameter",
					"name": "C"
				},
				"extendsType": {
					"type": "reference",
					"typeArguments": [
						{
							"type": "inferred",
							"name": "P"
						}
					],
					"name": "React.ComponentType"
				},
				"trueType": {
					"type": "typeParameter",
					"name": "P"
				},
				"falseType": {
					"type": "intrinsic",
					"name": "never"
				}
			}
		},
		{
			"id": 208,
			"name": "RequiredBy",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 209,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				},
				{
					"id": 210,
					"name": "K",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					},
					"type": {
						"type": "typeOperator",
						"operator": "keyof",
						"target": {
							"type": "typeParameter",
							"name": "T"
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 78,
					"character": 15
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "T"
							},
							{
								"type": "typeParameter",
								"name": "K",
								"constraint": {
									"type": "typeOperator",
									"operator": "keyof",
									"target": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							}
						],
						"name": "Omit"
					},
					{
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									},
									{
										"type": "typeParameter",
										"name": "K",
										"constraint": {
											"type": "typeOperator",
											"operator": "keyof",
											"target": {
												"type": "typeParameter",
												"name": "T"
											}
										}
									}
								],
								"name": "Pick"
							}
						],
						"name": "Required"
					}
				]
			}
		},
		{
			"id": 207,
			"name": "SlideTransitionDirection",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 27,
					"character": 36
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "down"
					},
					{
						"type": "stringLiteral",
						"value": "left"
					},
					{
						"type": "stringLiteral",
						"value": "right"
					},
					{
						"type": "stringLiteral",
						"value": "up"
					}
				]
			}
		},
		{
			"id": 217,
			"name": "SnackbarAction",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 86,
					"character": 26
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "React.ReactNode"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 218,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 219,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"parameters": [
										{
											"id": 220,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"id": 213,
												"name": "SnackbarKey"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "React.ReactNode"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types.ts",
									"line": 86,
									"character": 46
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 247,
			"name": "SnackbarClassKey",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 96,
					"character": 28
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "root"
					},
					{
						"type": "stringLiteral",
						"value": "anchorOriginTopCenter"
					},
					{
						"type": "stringLiteral",
						"value": "anchorOriginBottomCenter"
					},
					{
						"type": "stringLiteral",
						"value": "anchorOriginTopRight"
					},
					{
						"type": "stringLiteral",
						"value": "anchorOriginBottomRight"
					},
					{
						"type": "stringLiteral",
						"value": "anchorOriginTopLeft"
					},
					{
						"type": "stringLiteral",
						"value": "anchorOriginBottomLeft"
					}
				]
			}
		},
		{
			"id": 221,
			"name": "SnackbarContentCallback",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 87,
					"character": 35
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "React.ReactNode"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 222,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 223,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"parameters": [
										{
											"id": 224,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"type": {
												"type": "reference",
												"id": 213,
												"name": "SnackbarKey"
											}
										},
										{
											"id": 225,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 216,
												"name": "SnackbarMessage"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "React.ReactNode"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types.ts",
									"line": 87,
									"character": 55
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 250,
			"name": "SnackbarContentProps",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 121,
					"character": 32
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"name": "HTMLDivElement"
					}
				],
				"name": "HTMLAttributes"
			}
		},
		{
			"id": 213,
			"name": "SnackbarKey",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 81,
					"character": 23
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "intrinsic",
						"name": "number"
					}
				]
			}
		},
		{
			"id": 216,
			"name": "SnackbarMessage",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 85,
					"character": 27
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "string"
			}
		},
		{
			"id": 226,
			"name": "TransitionCloseHandler",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 89,
					"character": 34
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 227,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 228,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 229,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "SyntheticEvent"
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								},
								{
									"id": 230,
									"name": "reason",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"id": 215,
										"name": "CloseReason"
									}
								},
								{
									"id": 231,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 213,
										"name": "SnackbarKey"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 89,
							"character": 36
						}
					]
				}
			}
		},
		{
			"id": 232,
			"name": "TransitionEnterHandler",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 90,
					"character": 34
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 233,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 234,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 235,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"name": "HTMLElement"
									}
								},
								{
									"id": 236,
									"name": "isAppearing",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 237,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"id": 213,
										"name": "SnackbarKey"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 90,
							"character": 36
						}
					]
				}
			}
		},
		{
			"id": 238,
			"name": "TransitionExitHandler",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 91,
					"character": 33
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 239,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 240,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 241,
									"name": "node",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"name": "HTMLElement"
									}
								},
								{
									"id": 242,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"id": 213,
										"name": "SnackbarKey"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 91,
							"character": 35
						}
					]
				}
			}
		},
		{
			"id": 214,
			"name": "VariantType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 82,
					"character": 23
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "default"
					},
					{
						"type": "stringLiteral",
						"value": "error"
					},
					{
						"type": "stringLiteral",
						"value": "success"
					},
					{
						"type": "stringLiteral",
						"value": "warning"
					},
					{
						"type": "stringLiteral",
						"value": "info"
					}
				]
			}
		},
		{
			"id": 244,
			"name": "VariantsOf",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 245,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 94,
					"character": 15
				}
			],
			"type": {
				"type": "indexedAccess",
				"indexType": {
					"type": "typeOperator",
					"operator": "keyof",
					"target": {
						"type": "typeParameter",
						"name": "T"
					}
				},
				"objectType": {
					"type": "reflection",
					"declaration": {
						"id": 246,
						"name": "__type",
						"kind": 65536,
						"kindString": "Type literal",
						"flags": {
							"isExported": true
						},
						"sources": [
							{
								"fileName": "src/types.ts",
								"line": 94,
								"character": 20
							}
						]
					}
				}
			}
		},
		{
			"id": 267,
			"name": "SnackbarContent",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 340,
					"character": 36
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 250,
								"name": "SnackbarContentProps"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "HTMLDivElement"
									}
								],
								"name": "RefAttributes"
							}
						]
					}
				],
				"name": "React.ComponentType"
			}
		},
		{
			"id": 268,
			"name": "useSnackbar",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 269,
					"name": "useSnackbar",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 270,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"id": 243,
								"name": "AnyComponentMap"
							}
						}
					],
					"type": {
						"type": "reference",
						"id": 112,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "T",
								"constraint": {
									"type": "reference",
									"id": 243,
									"name": "AnyComponentMap"
								}
							}
						],
						"name": "ProviderContext"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 342,
					"character": 35
				}
			]
		},
		{
			"id": 261,
			"name": "withSnackbar",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 262,
					"name": "withSnackbar",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 263,
							"name": "P",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"id": 112,
								"name": "ProviderContext"
							}
						}
					],
					"parameters": [
						{
							"id": 264,
							"name": "component",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "P",
										"constraint": {
											"type": "reference",
											"id": 112,
											"name": "ProviderContext"
										}
									}
								],
								"name": "React.ComponentType"
							}
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "P",
												"constraint": {
													"type": "reference",
													"id": 112,
													"name": "ProviderContext"
												}
											},
											{
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"id": 112,
													"name": "ProviderContext"
												}
											}
										],
										"name": "Omit"
									}
								],
								"name": "ComponentClass"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 265,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 266,
											"name": "WrappedComponent",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/types.ts",
													"line": 338,
													"character": 77
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "P",
														"constraint": {
															"type": "reference",
															"id": 112,
															"name": "ProviderContext"
														}
													}
												],
												"name": "React.ComponentType"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												266
											]
										}
									],
									"sources": [
										{
											"fileName": "src/types.ts",
											"line": 338,
											"character": 58
										}
									]
								}
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 337,
					"character": 36
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				119
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				101,
				65,
				61,
				42,
				112,
				24,
				21,
				75,
				1,
				4,
				9
			],
			"categories": [
				{
					"title": "Enqueue",
					"children": [
						42
					]
				},
				{
					"title": "Other",
					"children": [
						101,
						65,
						61,
						112,
						21,
						1,
						9
					]
				},
				{
					"title": "Provider",
					"children": [
						75
					]
				},
				{
					"title": "Shared",
					"children": [
						24,
						4
					]
				}
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				255,
				259,
				243,
				211,
				215,
				249,
				248,
				253,
				251,
				252,
				257,
				208,
				207,
				217,
				247,
				221,
				250,
				213,
				216,
				226,
				232,
				238,
				214,
				244
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				267
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				268,
				261
			]
		}
	]
}